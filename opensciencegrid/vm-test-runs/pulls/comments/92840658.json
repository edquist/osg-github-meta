{
  "_links": {
    "html": {
      "href": "https://github.com/opensciencegrid/vm-test-runs/pull/22#discussion_r92840658"
    }, 
    "pull_request": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/22"
    }, 
    "self": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/92840658"
    }
  }, 
  "author_association": "OWNER", 
  "body": "Ah, I think that was my original intention. Commit incoming", 
  "commit_id": "3dd8bb1d44bb3d07dbc8eba17202a714fd6d4281", 
  "created_at": "2016-12-16T16:24:50Z", 
  "diff_hunk": "@@ -0,0 +1,192 @@\n+#!/usr/bin/env python\n+# python -m unittest -v test_vmu[.TestClass][.test_function]\n+\n+#pylint: disable=C0301\n+#pylint: disable=R0904\n+\n+import copy\n+import os\n+import sys\n+import unittest\n+\n+PATHNAME = os.path.realpath('../')\n+sys.path.insert(0, PATHNAME)\n+\n+import vmu\n+\n+def results_msg(expected, actual, msg):\n+    divider = '='*70 + '\\n'\n+    return '%s\\n' % msg + divider + \\\n+        'EXPECTED:\\n%s\\n' % str(expected) + divider + \\\n+        'ACTUAL:\\n%s\\n' % str(actual)\n+\n+class TestVmu(unittest.TestCase):\n+\n+    def assertEqualWithResults(self, expected, actual, msg=None):\n+        \"\"\"Assert equality with pre-built failure message\"\"\"\n+        self.assertEqual(expected, actual, results_msg(expected, actual, msg))\n+\n+    def assertNotEqualWithResults(self, expected, actual, msg=None):\n+        \"\"\"Assert inequality with pre-built failure message\"\"\"\n+        self.assertNotEqual(expected, actual, results_msg(expected, actual, msg))\n+\n+class TestPackageSet(TestVmu):\n+\n+    def test_missing_label(self):\n+        self.assertRaises(vmu.ParamError, vmu.PackageSet, '', [1, 2, 3])\n+\n+    def test_empty_packages(self):\n+        self.assertRaises(vmu.ParamError, vmu.PackageSet, 'foo', [])\n+\n+    def test_equality(self):\n+        self.assertEqualWithResults(vmu.PackageSet('foo', [1, 2, 3], True, False),\n+                                    vmu.PackageSet('foo', [1, 2, 3], True, False),\n+                                    'PackageSet label or packages equality broken')\n+        self.assertEqualWithResults(vmu.PackageSet('foo', [1, 2, 3], True, False),\n+                                    vmu.PackageSet('foo', [1, 2, 3], False, False),\n+                                    'PackageSet SELinux equality broken')\n+        # Test mismatched tags\n+        self.assertRaises(vmu.ParamError, vmu.PackageSet.__eq__,\n+                          vmu.PackageSet('foo', [1, 2, 3], True, False),\n+                          vmu.PackageSet('bar', [1, 2, 3], False, False))\n+\n+    def test_inequality(self):\n+        self.assertNotEqualWithResults(vmu.PackageSet('foo', [1, 2, 3]),\n+                                       vmu.PackageSet('bar', [4, 5, 6]),\n+                                       'PackageSet packages inequality broken')\n+        self.assertNotEqualWithResults(vmu.PackageSet('foo', [1, 2, 3]),\n+                                       vmu.PackageSet('foo', [4, 5, 6]),\n+                                       'PackageSet packages inequality broken')\n+        self.assertNotEqualWithResults(vmu.PackageSet('foo', [1, 2, 3], java=True),\n+                                       vmu.PackageSet('foo', [1, 2, 3], java=False),\n+                                       'PackageSet java inequality broken')\n+        # Test mismatched tags\n+        self.assertRaises(vmu.ParamError, vmu.PackageSet.__eq__,\n+                          vmu.PackageSet('foo', [1, 2, 3], True, False),\n+                          vmu.PackageSet('bar', [1, 2, 3], False, False))\n+\n+    def test_sorting(self):\n+        unsorted_pkgs = [vmu.PackageSet('All + GRAM', [1]),\n+                vmu.PackageSet('GridFTP', [1]),\n+                vmu.PackageSet('VOMS', [1]),\n+                vmu.PackageSet('All + GRAM (3.2)', [1]),\n+                vmu.PackageSet('All', [1]),\n+                vmu.PackageSet('HTCondor', [1]),\n+                vmu.PackageSet('GUMS', [1]),\n+                vmu.PackageSet('BeStMan', [1]),\n+                vmu.PackageSet('foo', [1])]\n+        unsorted_pkgs.sort()\n+        self.assertEqualWithResults(vmu.PackageSet.LABEL_ORDER + ['foo'],\n+                                    [x.label for x in unsorted_pkgs],\n+                                    'Unexpected sort order')\n+\n+    def test_defaults(self):\n+        pkg_set = vmu.PackageSet('foo', [1, 2, 3])\n+        self.assertEqual(pkg_set.selinux, vmu.PackageSet.SELINUX_DEFAULT, 'Failed to set SELinux default')\n+        self.assertEqual(pkg_set.java, vmu.PackageSet.OSG_JAVA_DEFAULT, 'Failed to set OSG Java default')\n+\n+\n+    def test_hashable(self):\n+        selinux_enabled = vmu.PackageSet('foo', [1, 2, 3], True, True)\n+        self.assert_(set([selinux_enabled]),\n+                     'PackageSet.__hash__() broken')\n+        self.assertEqualWithResults(set([selinux_enabled]),\n+                                    set([selinux_enabled, selinux_enabled]),\n+                                    'PackageSet hash equality')", 
  "html_url": "https://github.com/opensciencegrid/vm-test-runs/pull/22#discussion_r92840658", 
  "id": 92840658, 
  "in_reply_to_id": 92836866, 
  "original_commit_id": "40302f280da27ec30c808fcb4d8917d4087c1a2a", 
  "original_position": 95, 
  "path": "tests/test_vmu.py", 
  "position": null, 
  "pull_request_review_id": 13364114, 
  "pull_request_url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/22", 
  "updated_at": "2016-12-20T20:16:30Z", 
  "url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/92840658", 
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/390105?v=4", 
    "events_url": "https://api.github.com/users/brianhlin/events{/privacy}", 
    "followers_url": "https://api.github.com/users/brianhlin/followers", 
    "following_url": "https://api.github.com/users/brianhlin/following{/other_user}", 
    "gists_url": "https://api.github.com/users/brianhlin/gists{/gist_id}", 
    "gravatar_id": "", 
    "html_url": "https://github.com/brianhlin", 
    "id": 390105, 
    "login": "brianhlin", 
    "organizations_url": "https://api.github.com/users/brianhlin/orgs", 
    "received_events_url": "https://api.github.com/users/brianhlin/received_events", 
    "repos_url": "https://api.github.com/users/brianhlin/repos", 
    "site_admin": false, 
    "starred_url": "https://api.github.com/users/brianhlin/starred{/owner}{/repo}", 
    "subscriptions_url": "https://api.github.com/users/brianhlin/subscriptions", 
    "type": "User", 
    "url": "https://api.github.com/users/brianhlin"
  }
}
