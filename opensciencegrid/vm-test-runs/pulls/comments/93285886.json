{
  "_links": {
    "html": {
      "href": "https://github.com/opensciencegrid/vm-test-runs/pull/22#discussion_r93285886"
    }, 
    "pull_request": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/22"
    }, 
    "self": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/93285886"
    }
  }, 
  "author_association": "MEMBER", 
  "body": "For what it's worth, this string representation is probably more appropriate for the `__str__` function (which I'm guessing would still do what you want).\r\n\r\nA `__repr__` function generally tries to give you text that will reproduce the object, so in this case maybe something more like\r\n\r\n`return \"PackageSet(label=%s, packages=%s, selinux=%s)\" % (self.label, self.packages, self.selinux)`\r\n\r\n[https://docs.python.org/2/reference/datamodel.html#object.\\_\\_repr\\_\\_](https://docs.python.org/2/reference/datamodel.html#object.__repr__)\r\n[https://docs.python.org/2/reference/datamodel.html#object.\\_\\_str\\_\\_](https://docs.python.org/2/reference/datamodel.html#object.__str__)\r\nhttp://stackoverflow.com/questions/1436703/difference-between-str-and-repr-in-python\r\n", 
  "commit_id": "3dd8bb1d44bb3d07dbc8eba17202a714fd6d4281", 
  "created_at": "2016-12-20T17:30:27Z", 
  "diff_hunk": "@@ -115,3 +90,86 @@ def canonical_src_string(sources):\n     result = re.sub(r',', ' + ', result)\n     result = re.sub(r'^(\\d+\\.\\d+)(.*-> )(?!\\d)', '\\\\1\\\\2\\\\1 ', result) # Duplicate release series, when needed\n     return result.strip()\n+\n+class ParamError(Exception):\n+    \"\"\"Exception for errors in parameter files\"\"\"\n+    pass\n+\n+class PackageSet(object):\n+    \"\"\"A class for comparing package sets as specified in VMU test parameters\n+\n+    Instance parameters:\n+\n+    label: string describing the package set, used for reporting\n+    packages: list of packages as strings\n+    selinux: boolean to turn on/off SELinux enforcing mode (default: False)\n+    java: boolean to pre-install OSG java packages (default: True)\n+\n+    PackageSets are equal if their 'packages' lists are the same. If 'packages'\n+    lists are equal but 'label' is not, ParamError is raised.\n+\n+    PackageSets are sorted by labels according to LABEL_ORDER. Unknown labels\n+    are sorted alphanumerically after the known labels.\n+    \"\"\"\n+\n+    OSG_JAVA_DEFAULT = True\n+    SELINUX_DEFAULT = False\n+    LABEL_ORDER = ['All', 'All + GRAM', 'All + GRAM (3.2)', 'HTCondor', 'GridFTP', 'BeStMan', 'VOMS', 'GUMS']\n+\n+    def __init__(self, label, packages, selinux=SELINUX_DEFAULT, java=OSG_JAVA_DEFAULT):\n+        if not label:\n+            raise ParamError(\"PackageSet 'label' field cannot be blank\")\n+        if not packages:\n+            raise ParamError(\"PackageSet 'packages' field must be non-empty list\")\n+        self.label = label\n+        self.selinux = selinux\n+        self.java = java\n+\n+        if self.java:\n+            self.packages = ['java-1.7.0-openjdk-devel', 'osg-java7-compat', 'osg-java7-devel-compat'] + packages\n+        else:\n+            self.packages = packages\n+\n+    def __eq__(self, other):\n+        if isinstance(other, PackageSet):\n+            if self.packages == other.packages:\n+                if self.label != other.label:\n+                    raise ParamError(\"Different package set tags ('%s', '%s') refer to the same set of packages. \" %\n+                                     (self.label, other.label) + \"Check if java attributes are different.\")\n+                return True\n+            elif self.label == other.label:\n+                raise ParamError(\"Package set label '%s' refers to different sets of packages\" % self.label)\n+            return False\n+        return NotImplemented\n+\n+    def __ne__(self, other):\n+        result = self.__eq__(other)\n+        if result is NotImplemented:\n+            return result\n+        return not result\n+\n+    def __lt__(self, other):\n+        def get_sort_val(pkg_set):\n+            try:\n+                return pkg_set.LABEL_ORDER.index(pkg_set.label)\n+            except ValueError:\n+                return pkg_set.label\n+        return get_sort_val(self) < get_sort_val(other)\n+\n+    def __hash__(self):\n+        # Treat similarly labeled sets of packages as equal for hashing;\n+        # SELinux status can differ on a per-run basis\n+        return hash(repr(self).replace('%s, ' % self.selinux, ''))\n+\n+    def __repr__(self):\n+        return str([self.label, self.selinux, self.packages])", 
  "html_url": "https://github.com/opensciencegrid/vm-test-runs/pull/22#discussion_r93285886", 
  "id": 93285886, 
  "original_commit_id": "27c1e93ceb14e2ebfbcf655903c3ff919112ddf5", 
  "original_position": 194, 
  "path": "vmu.py", 
  "position": null, 
  "pull_request_review_id": 13810349, 
  "pull_request_url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/22", 
  "updated_at": "2016-12-20T20:16:30Z", 
  "url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/93285886", 
  "user": {
    "avatar_url": "https://avatars3.githubusercontent.com/u/5522437?v=4", 
    "events_url": "https://api.github.com/users/edquist/events{/privacy}", 
    "followers_url": "https://api.github.com/users/edquist/followers", 
    "following_url": "https://api.github.com/users/edquist/following{/other_user}", 
    "gists_url": "https://api.github.com/users/edquist/gists{/gist_id}", 
    "gravatar_id": "", 
    "html_url": "https://github.com/edquist", 
    "id": 5522437, 
    "login": "edquist", 
    "organizations_url": "https://api.github.com/users/edquist/orgs", 
    "received_events_url": "https://api.github.com/users/edquist/received_events", 
    "repos_url": "https://api.github.com/users/edquist/repos", 
    "site_admin": false, 
    "starred_url": "https://api.github.com/users/edquist/starred{/owner}{/repo}", 
    "subscriptions_url": "https://api.github.com/users/edquist/subscriptions", 
    "type": "User", 
    "url": "https://api.github.com/users/edquist"
  }
}
