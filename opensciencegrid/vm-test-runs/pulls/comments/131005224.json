{
  "_links": {
    "html": {
      "href": "https://github.com/opensciencegrid/vm-test-runs/pull/40#discussion_r131005224"
    }, 
    "pull_request": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/40"
    }, 
    "self": {
      "href": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/131005224"
    }
  }, 
  "author_association": "OWNER", 
  "body": "`<git@github.com>` does not need to be in brackets", 
  "commit_id": "8ab7a042325d870072db4278a0fa15d76fa1bfa0", 
  "created_at": "2017-08-02T21:44:41Z", 
  "diff_hunk": "@@ -0,0 +1,425 @@\n+Running Tests as VM Jobs\n+========================\n+\n+This repository drives the OSG Software nightly tests. Whenever updating [osg-run-tests](osg-run-tests), make sure to update the copy in `/usr/bin/` on `osghost`.\n+\n+Setting up credentials\n+----------------------\n+\n+**Note:** This one time setup must be performed before submitting any test jobs.\n+\n+1.  Contact Brian L. or Tim C. to have an account created on `osghost.chtc.wisc.edu`\n+2.  SSH to `osghost` (you will need to do this from the UW-Madison network) and create a password-less SSH key:\n+\n+        [user@client ~]$ ssh-keygen -C 'VMU test result upload key for <USER>@osghost' -f ~/.ssh/test_result_upload.key\n+\n+3.  Contact BrianL or MatS with your public key. They will add your public key to the `authorized_keys` file of the `cndrutil` user on `ingwe`.\n+4.  Add `ingwe's` pubkey to your `known_hosts` file by initiating an SSH connection. You do not need to login:\n+\n+        [user@client ~]$ ssh ingwe.cs.wisc.edu\n+        The authenticity of host 'ingwe.cs.wisc.edu (128.105.121.64)' can't be established.\n+        RSA key fingerprint is 8c:44:ac:fd:c5:9e:1c:7a:c1:e1:42:40:c3:e5:4b:fc.\n+        Are you sure you want to continue connecting (yes/no)? yes\n+        Warning: Permanently added 'ingwe.cs.wisc.edu,128.105.121.64' (RSA) to the list of known hosts.\n+        blin@ingwe.cs.wisc.edu's password:\n+\n+Running osg-test in VM Universe\n+-------------------------------\n+\n+The procedure explained in this section replaces [this](https://twiki.opensciencegrid.org/bin/view/SoftwareTeam/SoftwareDevelopmentProcess) if and only if there are functional tests for each package being tested.\n+\n+1.  From `osghost.chtc.wisc.edu`, make and populate a test run directory:\n+\n+        [user@client ~]$ osg-run-tests '<RUN DESCRIPTION>'\n+2.  Change to the test run directory (see output of osg-run-tests)\n+3.  If you need to change `osg-test`, use one of the methods below:\n+    -   Make changes to a github fork of osg-test and prepend the source lines in the yaml parameters files (see below) with the following: `<GITHUB ACCOUNT>:<BRANCH OF OSG-TEST>;`\n+    -   Edit `test-changes.patch` with test module and library changes and/or edit `osg-test.patch` with osg-test script changes. These patches can be generated with `git diff`.\n+\n+4.  If there are test failures that shouldn't be marked as failures in the reporting, edit `test-exceptions.yaml` you can add test failures to ignore with the following format:\n+\n+        # - [test_function, test_module, start date, end date].\n+        [test_04_trace, test_55_condorce, 2014-12-01, 2015-01-14]\n+\n+5.  If you want to change test run parameters, edit `parameters.d/osg32.yaml`, `parameters.d/osg33-el6.yaml`, or `parameters.d/osg33-el7.yaml` or you can add/remove yaml files with the same format. Each file in `paramaters.d` generates an osg-test run for every possible combination of the `platforms`, `sources`, and `package_sets` parameters in that file.\n+    1.  To change the distribution, modify the `platforms` section. Accepted values are listed below:\n+\n+              platforms:\n+                - centos_6_x86_64\n+                - rhel_6_x86_64\n+                - sl_6_x86_64\n+                - centos_7_x86_64\n+                - rhel_7_x86_64\n+                - sl_7_x86_64\n+    2.  To change the repos that packages are installed from, edit the sources section, which has the following format:\n+\n+            [<GITHUB ACCOUNT>:<BRANCH OF OSG-TEST>;] <INITIAL OSG VERSION>; <INTIAL YUM REPO> [>] [<UPDATE OSG VERSION>/][<UPDATE YUM REPO>]\n+            # Run osg-test with packages from 3.1-release\n+            3.1; osg\n+            # Run osg-test with packages from 3.1-testing that are then upgraded to 3.2-testing\n+            3.1; osg-testing > 3.2/osg-testing\n+            # Run osg-test with packages from 3.2-release and 3.2-testing that are then upgraded to 3.3-testing and 3-3-upcoming-testing\n+            3.2; osg, osg-testing > 3.3/osg-testing, osg-upcoming-testing\n+            # Run osg-test from the 'opensciencegrid' github account using the 'master' branch (<https://github.com/opensciencegrid/osg-test.git>) with packages from 3.2-testing\n+            opensciencegrid:master; 3.2; osg-testing\n+    3. The `package_sets` section controls the packages that are installed, the label used for reporting, whether or not SELinux is enabled (default: disabled), and whether or not to pre-install the OSG Java packages (default: enabled): \n+\n+            package_sets:\n+            #### Required ####\n+            # label - used for reporting, should be consistent across param files\n+            # packages - list of packages to install in the test run\n+            #### Optional ####\n+            # selinux - enable SELinux for the package set, otherwise Permissive mode (default: False)\n+            # osg_java - Pre-install OSG java packages (default: True)\n+            ##################\n+            - label: All\n+              selinux: False\n+              osg_java: True\n+              packages:\n+                - osg-tested-internal\n+            - label: HTCondor\n+              selinux: False\n+              osg_java: True\n+              packages:\n+                - condor.x86_64\n+                - osg-ce-condor\n+                - rsv\n+    4. The test infrastructure can read multiple yaml files in `parameters.d`, which allows you to run different, mutually exclusive tests. For example, if you wanted to test 3.3 development on EL7 in addition to the standard tests, you could add the following to a file in `paramaters.d`:\n+\n+            platform:\n+              - centos_7_x86_64\n+              - sl_7_x86_64\n+\n+            sources:\n+              - 3.3; osg-development\n+\n+            package_sets:\n+              - label: All\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - osg-tested-internal\n+              # Explicitly add GRAM packages since they were dropped from osg-ce (SOFTWARE-2278, SOFTWARE-2291)\n+              - label: All + GRAM (3.2)\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - osg-tested-internal-gram\n+              - label: HTCondor\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - condor.x86_64\n+                  - osg-ce-condor\n+                  - rsv\n+              - label: GridFTP\n+                selinux: True\n+                osg_java: True\n+                packages:\n+                  - osg-gridftp\n+                  - edg-mkgridmap\n+                  - rsv\n+              - label: BeStMan\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - osg-se-bestman\n+                  - rsv\n+              - label: VOMS\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - osg-voms\n+                  - rsv\n+              - label: GUMS\n+                selinux: False\n+                osg_java: True\n+                packages:\n+                  - osg-gums\n+                  - rsv\n+6.  Submit the test run (you must submit the DAG from the run directory):\n+\n+        [user@client ~]$ ./master-run.dag\n+7.  Monitor the test run (as desired):\n+\n+        [user@client ~]$ condor_q -dag\n+8.  When the test run finishes, an email will go out to members of the software team (hardcoded in `email-analysis`). In the e-mail will be links to the web interface which will often not work immediately because the test results only get transferred over every 15 minutes.\n+\n+Troubleshooting\n+---------------\n+\n+### Missing Unicode Fonts\n+\n+The HTML reports for the testing results utilize unicode characters (namely the padlock to represent that SELinux was enabled). If these characters are appearing as the character code in a block, that means that the font you're using does not support these characters. To render these characters properly, perform the following steps:\n+\n+1.  Download a suitable Unicode Emoji font. We have had success with the \"Noto Emoji\" font available from <https://www.google.com/get/noto/>\n+2.  Create a `~/.fonts/` dir if one does not already exist\n+3.  Copy the `.ttf` file from the downloaded font `.zip` file into `~/.fonts/`\n+4.  Run `fc-cache -f`\n+\n+Notes about running osg-test as VM jobs\n+---------------------------------------\n+\n+This page is my (cat) collected notes and ideas about running osg-test runs as VM jobs, either locally (e.g., CHTC) or in OSG.\n+\n+### Using VM Universe in HTCondor\n+\n+For HTCondor 8.4, the documentation for VM universe is in [section 2.11](http://research.cs.wisc.edu/htcondor/manual/v8.4/2_11Virtual_Machine.html) of [the manual](http://research.cs.wisc.edu/htcondor/manual/v8.4/ref.html).\n+\n+Some quick notes:\n+\n+-   `universe = vm`\n+-   `executable` is just a label\n+-   Omit `input`, `output`, and `error`, as they are not used and will cause submit failures\n+-   Must select a `vm_type` of `vmware`, `xen`, or `kvm`\n+\n+### Using VM Universe in CHTC\n+\n+The only VM universe support in CHTC was using a now-archaic version of [http://www.vmware.com VMware](http://www.vmware.com VMware); this was set up in support of the Thomas Jahns lab. Essentially, in July 2013, there is no current support. However, the CHTC infrastructure team is interested in adding real support for at least kvm.\n+\n+On 3 July 2013, Nate Yehle proposed working with us to add kvm support in stages. Roughly:\n+\n+1.  Nate will set up kvm on `osghost.chtc.wisc.edu` to create a playground\n+2.  Nate will show TimC how to run an arbitrary image on `osghost`\n+3.  TimC will iterate on a basic SL6 VM image (probably using BoxGrinder, see below) until it starts, runs a simple process, and exits cleanly\n+4.  Nate and TimC will work together to identify and solve any issues with the test VM image, especially concerning networking\n+5.  Nate will set up one CHTC node with kvm support\n+6.  TimC will try to run the test VM image on the CHTC node using HTCondor\n+7.  Iterate and grow as needed and possible\n+\n+### Selecting a VM Type\n+\n+On 2 July 2013, Jaime and ToddM suggested focusing on kvm as the VM type. People on the team have the most experience with kvm. Avoid VMware (no reasons recorded).\n+\n+To run our test code, use the `rc.local` system (file? directory?). It should run last in the startup sequence, after all other services are running. Ask ToddM for help, if needed. Once the tests are done, shut down the VM from the same script.\n+\n+### Creating VM Images\n+\n+At the heart of each test run will be a base OS image, containing a relatively bare-bones OS installation along with a few key files to set up networking, users, certificates, etc.\n+\n+The base images, one for each platform on which we wish to test, will need to be recreated periodically, say once a week, and reused many times. Thus, the process of creating a base OS image must be scriptable. There are tools to create Linux installations on VM images:\n+\n+-   John Hover has used [BoxGrinder](http://boxgrinder.org) to do his virtualization work. It has not received an update since mid-2012, but has been sufficient for his needs.\n+-   [Oz](https://github.com/clalancette/oz/wiki) is newer and support some but not all of BoxGrinder\u2019s features. Tony Tiradani at Fermi uses it.\n+-   [Image Factory](http://imgfac.org) builds on Oz by adding features to prepare and install VM images for cloud deployment. It is available via RPM on EL 6, Fedora 16, and Fedora 17 platforms from their own repository, as described in [the installation documentation](http://imgfac.org/documentation/install.html).\n+\n+John H. (11 July 2013) noted that BoxGrinder may run only on the latest Fedora releases, such as 17 and 18; I did not check whether this is true. Also, John noted that he had some problems with BoxGrinder: He could not install both x86-64 and i386 RPMs at the same time, due to limitations in the tool; and there were some issues with EC2, but they would not affect us. John\u2019s BoxGrinder patches are available in his source code repository.\n+\n+One other thing to think about: BoxGrinder appliance files are fairly simple to understand and reference files contained in the same directory. However, imagefactory uses one giant XML file, with all installed files inlined. Yuck!\n+\n+Tony Tiradani at Fermi also has experience with creating VM images. He uses Oz, and [has a Subversion repository](https://github.com/holzman/gwms-cloud-vms/tree/development) with an example of his TDL file.\n+\n+[Another document](http://docs.openstack.org/trunk/openstack-image/content/ch_creating_images_automatically.html), on the OpenStack site, gives an example of using Oz with EPEL.\n+\n+If there are performance issues with transferring this image, likely to be 4GB or so, the CHTC infrastructure folks could set up some kind of caching, possibly via the Ken Hahn Filesystem.\n+\n+#### Commands\n+\n+##### Oz\n+\n+``` screen\n+oz-install -d 4 -p -u -x oz-generated-libvirt.xml sl64.tdl\n+```\n+\n+-   The `-d 4` option yields maximum debugging output\n+-   The `-p` option removes the existing guest image file\n+-   The `-u` option runs the image customization steps (after installation is done)\n+-   The argument is the name of the TDL XML file\n+\n+##### Virsh\n+\n+To load the definition of the guest into virsh:\n+\n+``` screen\n+virsh define cat-libvirt.xml\n+```\n+\n+-   The second argument is the name of the libvirt domain definition file, as documented [on the libvirt website](http://libvirt.org/formatdomain.html). It is an XML file that defines what the VM guest configuration, including things like the guest name, memory size, VM image(s), networking configuration, etc.\n+\n+To start the guest:\n+\n+``` screen\n+virsh start cat.chtc.wisc.edu\n+```\n+\n+-   The second argument is the guest name, as defined in the domain definition file.\n+\n+To stop the guest, as though disconnecting the power:\n+\n+``` screen\n+virsh destroy cat.chtc.wisc.edu\n+```\n+\n+-   The second argument is the guest name, as defined in the domain definition file.\n+\n+To remove the definition of the guest from virsh:\n+\n+``` screen\n+virsh undefine cat.chtc.wisc.edu\n+```\n+\n+-   The second argument is the guest name, as defined in the domain definition file.\n+\n+#### Configuring for a Static IP Address\n+\n+To make an image that will run as cat.chtc.wisc.edu, I need to tell both kvm (externally, on the host) and the image the same fixed MAC address. From within the original cat.chtc.wisc.edu machine, I found that `ifconfg` reports `eth0` as the primary interface. So this file:\n+\n+    /etc/sysconfig/network-scripts/ifcfg-eth0\n+\n+needs to contain:\n+\n+    DEVICE=eth0\n+    ONBOOT=yes\n+    HWADDR=00:16:3E:45:66:99\n+    TYPE=Ethernet\n+    BOOTPROTO=dhcp\n+\n+#### Hostname and Host Certificates\n+\n+The test runs will need a valid host certificate. How to accomplish this?\n+\n+Jaime and ToddM suggested getting a single, static hostname from the CSL. Then, the networking system in the base OS images would be set up such that this name would resolve, but only on the VM itself, not going out to the network. Then, we could request a host certificate from DigiCert for this fixed hostname, and that host certificate would be shipped with the base OS VM image. Jaime and ToddM know how to set up the fake hostname lookups in the VM configuration.\n+\n+### Handling Input and Output\n+\n+To handle input and output, Jaime and ToddM recommended having separate, small image files for them. Thus, two extra images, beyond the OS base install itself, may be needed:\n+\n+-   An input image, containing only a single text file with test run conditions.\n+-   An output image, initially empty and for saving the output log file(s). This image would be the only file transferred back from the run.\n+\n+The `qemu-img` tool make images and may be sufficient for the input and output images.\n+\n+Alternatively, John (11 July 2013) noted that there are tools designed for supplying a limited amount of input to an otherwise static VM image. He called this the \u201cHEPIX contextualization approach\u201d, although the HEPIX system is just one implementation. One possibility is the `cloud-init` package from Ubuntu, available on all Linux systems that we care about. I found [a project page](https://launchpad.net/cloud-init) and [some documentation](http://cloudinit.readthedocs.org/en/latest/).\n+\n+#### libguestfs\n+\n+To get `guestfish` and other tools, I had to install an extra package:\n+\n+``` screen\n+yum install libguestfs-tools-c\n+```\n+\n+This brought along another package:\n+\n+``` screen\n+Installed:\n+  libguestfs-tools-c.x86_64 1:1.16.34-2.el6\n+\n+Dependency Installed:\n+  libconfig.x86_64 0:1.3.2-1.1.el6\n+```\n+\n+To get `virt-make-fs` (recommended by Dave B.), there was another install:\n+\n+``` screen\n+yum install libguestfs-tools\n+```\n+\n+More packages:\n+\n+``` screen\n+Installed:\n+  libguestfs-tools.x86_64 1:1.16.34-2.el6\n+\n+Dependency Installed:\n+  perl-Sys-Guestfs.x86_64 1:1.16.34-2.el6\n+  perl-Sys-Virt.x86_64 0:0.9.10-4.el6\n+  perl-XML-Parser.x86_64 0:2.36-7.el6\n+  perl-XML-Writer.noarch 0:0.606-6.el6\n+  perl-XML-XPath.noarch 0:1.13-10.el6\n+  perl-libintl.x86_64 0:1.20-1.el6\n+```\n+\n+##### Creating the Input/Output Image\n+\n+1.  Create an input directory:\n+\n+        mkdir input\n+2.  Create an input options file in `input/options.txt`:\n+\n+        --add-user --dump-output --verbose --install=ndt\n+3.  Make the input/output image file (raw format):\n+\n+        virt-make-fs --size=1M input /var/lib/libvirt/images/vm-io-disk.raw\n+\n+##### Getting Files from the Image Manually\n+\n+1.  Create a mount point:\n+\n+        mkdir /mnt/output\n+2.  Mount the input/output image locally:\n+\n+        mount -o loop /var/lib/libvirt/images/vm-io-disk.raw /mnt/stuff\n+3.  Copy files to local disk:\n+\n+        cp -p /mnt/output/*.log output/\n+4.  Unmount the input/output image:\n+\n+        umount /mnt/stuff\n+\n+##### Getting Files from the Image Automatically\n+\n+``` screen\n+guestfish --ro --add vm-io-disk.raw --mount /dev/vda:/ download /osg-test-20130802.log osg-test-20130802.log\n+```\n+\n+### Interactively connecting to a VM\n+\n+Unfortunately, VM Universe jobs don't have the ssh\\_to\\_job capacity that's available to other Condor jobs so if we need to investigate test failures in VMU, we'll have to spin up our own VM's. We can do this by taking the images that Neil automatically generates and create new ones from them that don't automatically run osg-test (Right now, Neil has to manually copy over the updated images. Eventually, we should have an automated way to get the most updated VMU images). Here are the steps you need to follow to set up your own VM:\n+\n+1.  Grab the make-interactive-image from git:\n+\n+        git clone <git@github.com>:opensciencegrid/vm-test-runs.git", 
  "html_url": "https://github.com/opensciencegrid/vm-test-runs/pull/40#discussion_r131005224", 
  "id": 131005224, 
  "original_commit_id": "e2feeec43523117feefe2cf247187b6cd83ac0d4", 
  "original_position": 372, 
  "path": "README.md", 
  "position": null, 
  "pull_request_review_id": 53942285, 
  "pull_request_url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/40", 
  "updated_at": "2017-08-02T21:50:22Z", 
  "url": "https://api.github.com/repos/opensciencegrid/vm-test-runs/pulls/comments/131005224", 
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/5246893?v=4", 
    "events_url": "https://api.github.com/users/matyasselmeci/events{/privacy}", 
    "followers_url": "https://api.github.com/users/matyasselmeci/followers", 
    "following_url": "https://api.github.com/users/matyasselmeci/following{/other_user}", 
    "gists_url": "https://api.github.com/users/matyasselmeci/gists{/gist_id}", 
    "gravatar_id": "", 
    "html_url": "https://github.com/matyasselmeci", 
    "id": 5246893, 
    "login": "matyasselmeci", 
    "organizations_url": "https://api.github.com/users/matyasselmeci/orgs", 
    "received_events_url": "https://api.github.com/users/matyasselmeci/received_events", 
    "repos_url": "https://api.github.com/users/matyasselmeci/repos", 
    "site_admin": false, 
    "starred_url": "https://api.github.com/users/matyasselmeci/starred{/owner}{/repo}", 
    "subscriptions_url": "https://api.github.com/users/matyasselmeci/subscriptions", 
    "type": "User", 
    "url": "https://api.github.com/users/matyasselmeci"
  }
}
