{
  "_links": {
    "html": {
      "href": "https://github.com/opensciencegrid/docs/pull/20#discussion_r133988814"
    }, 
    "pull_request": {
      "href": "https://api.github.com/repos/opensciencegrid/docs/pulls/20"
    }, 
    "self": {
      "href": "https://api.github.com/repos/opensciencegrid/docs/pulls/comments/133988814"
    }
  }, 
  "author_association": "OWNER", 
  "body": "Typo here (`` `.R``)", 
  "commit_id": "afafc4045c5deedde210e467d5485f66112353c0", 
  "created_at": "2017-08-18T15:35:07Z", 
  "diff_hunk": "@@ -0,0 +1,456 @@\n+OSG PKI Command Line Clients\n+============================\n+\n+Overview\n+--------\n+\n+The OSG PKI Command Line Clients provide a command-line interface for requesting and issuing host certificates from the OSG PKI. They complement the [OIM Web Interface](https://oim.grid.iu.edu/oim/certificateuser).\n+\n+Prerequisites\n+-------------\n+\n+If you have not already done so, you need to [configure the OSG software repositories](../common/yum.md).\n+\n+Installation\n+------------\n+\n+The command-line scripts have been packaged as an RPM and are available from the OSG repositories.\n+\n+To install the RPM, run:\n+\n+```console\n+[root@client ~] # yum install osg-pki-tools\n+```\n+\n+Usage\n+-----\n+\n+### Configuration Files\n+\n+This configuration file contains information divided into two sections for testing and production.  Configuration variables include:\n+\n+-   Request URL\n+-   Approve URL\n+-   Retrieve URL\n+-   Host URL\n+\n+These parameters are used as input to the script depending upon the mode of execution of the script (test or OIM). The command-line utilities check for configuration files in the following order:\n+\n+-   `$HOME/.osg-pki/OSG_PKI.ini`\n+-   `./pki-clients.ini`\n+-   `/etc/pki-clients.ini`\n+\n+### osg-cert-request\n+\n+Sends a request for a host certificate.\n+\n+This script generates a private key and submits a request for a certificate to the OSG PKI. The request will be approved by an appropriate Grid Admin. You will receive an email when this approval has been completed containing directions on how to run `osg-cert-retreive` to retrieve the certificate. It works in two modes:\n+\n+-   CSR is provided by the user: the CSR provided is sent to the OIM.\n+-   CSR is not provided by the user: the script generates a private key for the user. Writes it to default key file name or the one specified by `-o`.\n+\n+This script:\n+\n+-   Generates a new host private key and CSR (the only important part of CSR is `CN=<HOSTNAME>` component).\n+-   Saves the host private key to disk (as specified by the user).\n+-   Authenticates to OIM and posts the CSR as a request to OIM.\n+-   Returns the request ID to the user.\n+\n+If the user provides the CSR, then this script would just send the same CSR to OIM.\n+\n+**Inputs:**\n+\n+-   fully-qualified hostname\n+-   filename to store private key (optional; default is `./hostkey.pem`).\n+-   path to user's certificate (optional: default is path specified by `$X509_USER_CERT` environment variable, then `~/.globus/usercert.pem`).\n+-   path to user's private key (optional: default is path specified by `$X509_USER_KEY` environment variable, then `~/.globus/userkey.pem`).\n+-   Passphrase for user's private key (via non-echoing prompt).\n+-   User needs to provide VO name if the requested hostname has multiple VO's assigned.\n+\n+**Outputs:**\n+\n+-   Private key, to filename specified by `-o` or `./hostkey.pem` by default.\n+-   Request Id, to `stdout`.\n+\n+```console\n+[root@client ~] # osg-cert-request --help\n+Usage: osg-cert-request [options]\n+\n+Options:\n+  -h, --help            show this help message and exit\n+  -c CSR, --csr=CSR     Specify CSR name (default = gennew.csr)\n+  -o OUTPUT KEYFILE, --outkeyfile=OUTPUT KEYFILE\n+                        Specify the output filename for the retrieved user certificate.\n+                        Default is ./hostkey.pem\n+  -v VO name, --vo=VO name\n+                        Specify the VO for the host request\n+  -y CC LIST, --cc=CC LIST\n+                        Specify the CC list(the email id's to be CCed).\n+                        Separate values by ','\n+  -m COMMENT, --comment=COMMENT\n+                        The comment to be added to the request\n+  -H CN, --hostname=CN  Specify a hostname for CSR (FQDN)\n+  -a HOSTNAME, --altname=HOSTNAME\n+                        Specify an alternative hostname for the CSR (FQDN). May be used more than once\n+  -e EMAIL, --email=EMAIL\n+                        Email address to receive certificate\n+  -n NAME, --name=NAME  Name of user receiving certificate\n+  -p PHONE, --phone=PHONE\n+                        Phone number of user receiving certificate\n+  -t TIMEOUT, --timeout=TIMEOUT\n+                        Specify the timeout in minutes\n+  -T, --test            Run in test mode\n+  -q, --quiet           don't print status messages to stdout\n+  -d WRITE_DIRECTORY, --directory=WRITE_DIRECTORY\n+                        Write the output files to this directory\n+  -V, --version         Print version information and exit\n+```\n+\n+#### Examples.\n+\n+OSG generates the key pair for the request.\n+\n+```console\n+[root@client ~] # osg-cert-request -t hostname.domain.com -e emailaddress@domain.com -n \"Your Name\" -p 9999999999 -y \"xyz@domain.com,abc@domain.com\" -m \"This is my comment\"\n+```\n+\n+If you want to request a service certificate, you need to escape backslash for service name inside CN like following.\n+\n+```console\n+[root@client ~] # osg-cert-request -t hostname.domain.com -e emailaddress@domain.com -n \"Your Name\" -p 9999999999 -y \"rsv\\/xyz@domain.com\" -m \"This is my comment\"\n+```\n+\n+You can create your CSR on your target hosts using tools such as `openssl`.\n+\n+```console\n+[root@client ~] # umask 077; openssl req -new -newkey rsa:2048 -nodes -keyout hostkey.pem -subj \"/CN=osg-ce.example.edu\" -out csr.pem\n+```\n+\n+Note that the DN will be overriden by the OSG PKI except for the CN component.\n+\n+Submitting the request:\n+\n+```console\n+[root@client ~] # osg-cert-request -t hostname.domain.com -e emailaddress@domain.com -n \"Your Name\" -p 9999999999 -y \"xyz@domain.com,abc@domain.com\" -m \"This is my comment\" --csr csr.pem\n+```\n+\n+### osg-cert-retrieve\n+\n+Retrieve a certificate (host or user) from OIM given a request Id. Typically you will run this script after submitting a request with `osg-cert-request` and receiving an email telling you your certificate has been approved.\n+\n+You can also use this script to retrieve other certificates that have been previously issued (assuming you know their request ID number).\n+\n+Since certificates are public, no authentication of the user is required.\n+\n+This script:\n+\n+-   Accepts a request Id from the user\n+-   Connects to OIM and requests the certificate identified by the request ID\n+-   Writes the certificate to disk (as specified by the user)\n+\n+**Inputs:**\n+\n+-   Request ID\n+-   Filename to store certificate (optional: default is `./hostcert.pem`).\n+\n+**Outputs:**\n+\n+-   Host certificate as PEM, to filename specified or `./hostcert.pem`.\n+\n+```console\n+[root@client ~] # osg-cert-retrieve --help\n+Usage: osg-cert-retrieve [options] <Request ID>\n+Usage: osg-cert-retrieve -h/--help [for detailed explanations of options]\n+\n+Options:\n+  -h, --help            show this help message and exit\n+  -o ID, --certfile=ID  Specify the output filename for the retrieved user\n+                        certificate . Default is ./hostcert.pem\n+  -T, --test            Run in test mode\n+  -t TIMEOUT, --timeout=TIMEOUT\n+                        Specify the timeout in minutes\n+  -q, --quiet           don't print status messages to stdout\n+  -d WRITE_DIRECTORY, --directory=WRITE_DIRECTORY\n+                        Write the output files to this directory\n+  -V, --version         Print version information and exit\n+  -i, --id              Specify ID# of certificate to be retrieved\n+                        [deprecated]\n+```\n+\n+Example:\n+\n+```console\n+[root@client ~] # osg-cert-retrieve -i 555\n+```\n+\n+### osg-gridadmin-cert-request\n+\n+Request and retrieve multliple host certificates from OIM. Authenticates to OIM and is only for use by Grid Admins for certificates they are authorized to approve. This script is only supported with all hosts being in the same domain (so we ensure they go to the same Grid Admin). The certificates are stored with the format of `hostname-requestid.pem` (i.e. the id generated from the request for the certificate). The key is stored as `hostname-serial-key.pem`.\n+\n+This script does the following in the process of acquiring certificates for the hostnames specified:\n+\n+-   Reads a list of fully-qualified hostnames from a file specified by the user.\n+-   For each hostname:\n+    -   Generates a new private key and CS`.R", 
  "html_url": "https://github.com/opensciencegrid/docs/pull/20#discussion_r133988814", 
  "id": 133988814, 
  "original_commit_id": "bbae732fc841f92644eaea9247a64451c4808f35", 
  "original_position": 194, 
  "path": "docs/common/pki-cli.md", 
  "position": null, 
  "pull_request_review_id": 57235872, 
  "pull_request_url": "https://api.github.com/repos/opensciencegrid/docs/pulls/20", 
  "updated_at": "2017-08-18T16:34:42Z", 
  "url": "https://api.github.com/repos/opensciencegrid/docs/pulls/comments/133988814", 
  "user": {
    "avatar_url": "https://avatars0.githubusercontent.com/u/5246893?v=4", 
    "events_url": "https://api.github.com/users/matyasselmeci/events{/privacy}", 
    "followers_url": "https://api.github.com/users/matyasselmeci/followers", 
    "following_url": "https://api.github.com/users/matyasselmeci/following{/other_user}", 
    "gists_url": "https://api.github.com/users/matyasselmeci/gists{/gist_id}", 
    "gravatar_id": "", 
    "html_url": "https://github.com/matyasselmeci", 
    "id": 5246893, 
    "login": "matyasselmeci", 
    "organizations_url": "https://api.github.com/users/matyasselmeci/orgs", 
    "received_events_url": "https://api.github.com/users/matyasselmeci/received_events", 
    "repos_url": "https://api.github.com/users/matyasselmeci/repos", 
    "site_admin": false, 
    "starred_url": "https://api.github.com/users/matyasselmeci/starred{/owner}{/repo}", 
    "subscriptions_url": "https://api.github.com/users/matyasselmeci/subscriptions", 
    "type": "User", 
    "url": "https://api.github.com/users/matyasselmeci"
  }
}
